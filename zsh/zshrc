HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt hist_ignore_all_dups
setopt hist_ignore_space
HISTORY_IGNORE="(ls|cd|pwd|exit|cd ..)"
bindkey -e
zstyle :compinstall filename '/home/leonard/.zshrc'

autoload -Uz compinit
compinit


autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search


# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"
key[ShiftLeft]="${terminfo[kLFT5]}"
key[ShiftRight]="${terminfo[kRIT5]}"

# setup key accordingly
[[ -n "${key[Home]}"        ]] && bindkey -- "${key[Home]}"        beginning-of-line
[[ -n "${key[End]}"         ]] && bindkey -- "${key[End]}"         end-of-line
[[ -n "${key[Insert]}"      ]] && bindkey -- "${key[Insert]}"      overwrite-mode
[[ -n "${key[Backspace]}"   ]] && bindkey -- "${key[Backspace]}"   backward-delete-char
[[ -n "${key[Delete]}"      ]] && bindkey -- "${key[Delete]}"      delete-char
[[ -n "${key[Up]}"          ]] && bindkey -- "${key[Up]}"          up-line-or-beginning-search
[[ -n "${key[Down]}"        ]] && bindkey -- "${key[Down]}"        down-line-or-beginning-search
[[ -n "${key[Left]}"        ]] && bindkey -- "${key[Left]}"        backward-char
[[ -n "${key[Right]}"       ]] && bindkey -- "${key[Right]}"       forward-char
[[ -n "${key[PageUp]}"      ]] && bindkey -- "${key[PageUp]}"      beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"    ]] && bindkey -- "${key[PageDown]}"    end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"    ]] && bindkey -- "${key[ShiftTab]}"    reverse-menu-complete
[[ -n "${key[ShiftLeft]}"   ]] && bindkey -- "${key[ShiftLeft]}"   backward-word
[[ -n "${key[ShiftRight]}"  ]] && bindkey -- "${key[ShiftRight]}"  forward-word

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start {
		echoti smkx
	}
	function zle_application_mode_stop {
		echoti rmkx
	}
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

setopt share_history

autoload -Uz promptinit
promptinit
prompt redhat




alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias ls='ls --color=auto'

# Git aliases
alias g='git'
alias gb='git branch'
alias ga='git add'
alias gl='git pull'
alias gp='git push'
alias gst='git status'
alias gc='git commit'
alias gco='git checkout'
alias gcmsg='git commit -m'

alias make='bear -- make'

alias bc='bc -q'

# Safeguard to force sudoedit
_sudo=$(command -v sudo)
function sudo {
    case $1 in
    $VISUAL|$EDITOR)
        shift
        sudoedit ${@}
        ;;
    *)
        $_sudo $@
        ;;
    esac
}

# Most remotes do not speak cat.
#if [ "$TERM" = "xterm-kitty" ]; then
#    alias ssh='env TERM=xterm-256color ssh'
#fi

function shtart() {
    nohup $@ >/dev/null 2>&1 &!
}
compdef _shtart shtart

function open() {
    shtart xdg-open $@
}

function _shtart() {
    local -a args

    args=(
        '(-)1:command: _command_names -e'
	'*::arguments:{ _normal }'
    )

    _arguments -s -S $args
}
