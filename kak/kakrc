# Enable plugin plugin :)
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "robertmeta/plug.kak" noload

# Enable support for C#
# c.f. rc/filetype/c-family.kak
hook global BufCreate .*[.](cs) %{
    set-option buffer filetype csharp
}

# Enable LSP support
plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    # uncomment to enable debugging
    #eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    #set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    hook global WinSetOption filetype=(rust|c|cpp|latex|context) %{
        lsp-enable-window
        lsp-auto-hover-enable
    }
}

# Referece
# * indentwidth: Number of *spaces* to insert
# * tabstop: Number of spaces a *tab* is rendered to be.

# Per-Buffer indendation fallbacks/defaults
hook global BufCreate .*[.](c|cpp|gas) %{
    set-option buffer indentwidth 0
    set-option buffer tabstop 8
}
hook global BufCreate .*[.](tex|mkiv|mkii) %{
    set-option buffer indentwidth 2
    set-option buffer tabstop 4
}
hook global BufCreate (.*[.]mk|[Mm]akefile) %{
    set-option buffer indentwidth 0
    set-option buffer tabstop 8
}

# Enable editorconfig support, possibly overriding defaults.
hook global WinCreate ^[^*]+$ %{editorconfig-load}

# Configure tab and backspace key behavior based on previous settings
plug "andreyorst/smarttab.kak" defer smarttab %{
    # set-option global softtabstop 4
} config %{
    hook global WinSetOption filetype=(.*) %{
        evaluate-commands %sh{
            if [ $kak_opt_indentwidth -ne 0 ]; then
                echo "expandtab"
                echo "set-option buffer softtabstop $kak_opt_indentwidth"
            elif [ $kak_opt_filetype = "gas" ] || [ $kak_opt_filetype = "nasm" ]; then
                echo "noexpandtab"
            else
                echo "smarttab"
            fi
        }
    }
}

hook global BufSetOption filetype=(rust) %{
#    set-option buffer makecmd "cargo --color always"
    set-option buffer makecmd "cargo"
    map -docstring "run" global user , ':make run<ret>'
    map -docstring "test" global user t ':make test<ret>'
    map -docstring "build" global user b ':make build<ret>'
}

hook global BufSetOption filetype=(latex|context) %{
    declare-option str documentsrc
    declare-option str documentdest

    declare-option str pdfviewer
    set-option buffer pdfviewer "okular"
    declare-option str pdfvieweropts
    set-option buffer pdfvieweropts "--unique"

    # printf ${kak_opt_pdfviewerfmt} $pdf $line $tex
    declare-option str pdfviewerfmt
    set-option buffer pdfviewerfmt "'%%s#src:%%d %%s'"

    # Search for `!TeX root` magic
    declare-option str projdir
    declare-option str workdir
    evaluate-commands %sh{
        buffile=$kak_buffile

        # We have three (possibly) different directories:
        # * project dir:  The current working directory.
        #   Usually the topmost dir, often containing multiple TeX roots and
        #   other resources such as bibliography files or fonts.
        # * buffer directory:  The directory containing the opened buffer.
        # * work directory:  The directory containing the TeX root of the
        #   currently opened buffer.
        #
        # The last is the most tricky to resolve, since if the buffer contains
        # a `% !TeX root = ` magic, it is not necessarily the same as the
        # buffer directory.  The magic itself may be even a relative path,
        # seen from the perspective of the buffer directory.
        projdir=$(realpath .)
        bufdir=$(dirname $buffile)

        # Parse the magic
        magic=$(grep '^% !TeX root = ' "$buffile" | sed 's/.*= //' -)
        case $magic in
          # No magic
          "") root=$buffile ;;
          # absolute path
          /*) root=$magic ;;
          # relative path
          *)  root=$(readlink -f $bufdir/$magic) ;;
        esac
        _workdir=$(dirname $root)
        workdir=$(realpath "$_workdir")
        # Strip the file extension
        trunk=$(echo "$root" | sed 's/\.[^\.]*$//' - )

        echo "set-option buffer documentsrc ${root}"
        echo "set-option buffer documentdest ${trunk}.pdf"
        echo "set-option buffer projdir ${projdir}"
        echo "set-option buffer workdir ${workdir}"
    }
    declare-option str osfontdir
    set-option buffer osfontdir "/usr/share/fonts//;%opt{projdir}/fonts//"

    # Enable running within toolbox
    declare-option str runner
    evaluate-commands %sh{
        if [ -z "$TOOLBOX_PATH" ]; then
            exit 0;
        fi
        #TODO: Is this possible w/o flatpak?
        echo "set-option buffer runner 'flatpak-spawn --host'"
    }
    declare-option str podman
    set-option buffer podman "%opt{runner} podman run --rm -v %opt{projdir}:%opt{projdir} --security-opt=label=disable -w %opt{workdir}"

    declare-option str buildcmd
    set-option buffer buildcmd ':make<ret>:evaluate-commands -try-client %opt{jumpclient} %{nop}<ret>'
    map -docstring "build & view" global user , %opt{buildcmd}
    map -docstring "view" global user v ':pdf-view %opt{documentdest}%opt{documentsrc} <ret>'
}

# LaTeXmk suppport
hook global BufSetOption filetype=(latex) %{
    declare-option str texlive
    set-option buffer texlive "docker.io/texlive/texlive"
    set-option buffer makecmd "%opt{podman} %opt{texlive} latexmk -pvc -view=none %opt{documentsrc}"
}

hook global BufSetOption filetype=(context) %{
    declare-option str context
    set-option buffer context "contextgarden/context:current"
    set-option buffer makecmd "%opt{podman} %opt{context} env OSFONTDIR='%opt{osfontdir}' context --paranoid --errors=list --nonstopmode %opt{documentsrc}"
}

# Use bear make wrapper.
hook global BufSetOption filetype=(c|cpp) %{
    set-option buffer makecmd "bear -- make"
}


define-command -params 2 pdf-view %{
    nop %sh{
        pdf="${1}"
        tex="${2}"
        line=${kak_cursor_line}
        args=$(printf "${kak_opt_pdfviewerfmt}" $pdf $line $tex)
        ${kak_opt_pdfviewer} ${kak_opt_pdfvieweropts} "$pdf#src:$line $tex" >/tmp/bar 2>&1 </dev/null &
#        echo ${kak_opt_pdfviewer} ${kak_opt_pdfvieweropts} ${args} >/tmp/foo
    }
}


#set-option global windowing_modules 'tmux' 'screen' 'kitty' 'iterm' 'x11' 'wayland'
set-option global windowing_modules 'tmux' 'screen' 'kitty' 'iterm' 'wayland' 'x11'
hook global ModuleLoaded wayland %{
}
hook global ModuleLoaded kitty %{
    set-option global kitty_window_type os
}

# From wiki
def ide %{
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

#    new rename-client docs
#    set global docsclient docs
}

set-option -add global ui_options ncurses_assistant=cat

# Highlight column
hook global WinSetOption autowrap_column=.* %{
    evaluate-commands %sh{
        name=window/autowrap_column
        if [ "$kak_opt_autowrap_column" -gt 0 ]; then
            column=$(($kak_opt_autowrap_column + 1))
            echo "add-highlighter -override $name column $column default,red"
        else
            echo "remove-highlighter $name"
        fi
    }
}

set-face global Whitespace rgb:dddddd+f
add-highlighter global/ show-whitespaces
add-highlighter global/ number-lines -relative

try %{ source ./.kakrc }
