CC=c99
CFLAGS=-O2 -g -Wall -Wextra -Wpedantic

# https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc

CFLAGS="${CFLAGS} -Werror=format-security -Werror=implicit-function-declaration"

# Avoid temporary files, speeding up builds
CFLAGS="${CFLAGS} -pipe"

# Run-time buffer overflow detection
CFLAGS="${CFLAGS} -D_FORTIFY_SOURCE=2"
CPPFLAGS=-D_FORTIFY_SOURCE=2

# Increased reliability of backtraces
CFLAGS="${CFLAGS} -fasynchronous-unwind-tables"

# Enable table-based thread cancellation
CFLAGS="${CFLAGS} -fexceptions"

# Generate data for hardening quality control   Future
CFLAGS="${CFLAGS} -fplugin=annobin"

# Increased reliability of stack overflow detection
CFLAGS="${CFLAGS} -fstack-clash-protection"

# Stack smashing protector
CFLAGS="${CFLAGS} -fstack-protector-all -fstack-protector-strong"

# Store compiler flags in debugging information
CFLAGS="${CFLAGS} -grecord-gcc-switches"

# Control flow integrity protection
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85485
CFLAGS="${CFLAGS} -mshstk -fcf-protection"

# Detect and reject underlinking
CFLAGS="${CFLAGS} -Wl,-z,defs"

# Disable lazy binding
CFLAGS="${CFLAGS} -Wl,-z,now"

# Read-only segments after relocation
CFLAGS="${CFLAGS} -Wl,-z,relro"

# https://twitter.com/martin_uecker/status/1449620903843794944
CFLAGS="${CFLAGS} -fsanitize=undefined -fsanitize-undefined-trap-on-error"
